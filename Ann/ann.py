# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rxFvP4Nxx1OPxrgGqg-of_Oif6J1QtKc

# **ANN**
"""

import pandas as pd
import numpy as np
import tensorflow as tf

tf.__version__

dataset = pd.read_csv('drive/MyDrive/Churn_Modelling.csv')
dataset.head(5)

x = dataset.iloc[:, 3:-1].values
y = dataset.iloc[:,-1].values

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
x[:,2] = le.fit_transform(x[:,2])

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(),[1])],remainder='passthrough')
x = np.array(ct.fit_transform(x))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)

"""Initializing the ANN"""

ann = tf.keras.models.Sequential()

"""Adding the Input layer and the first hidden layer."""

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))

"""Adding Second Layer"""

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))

"""Output Layer"""

ann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))

"""Compiling the ANN"""

ann.compile(optimizer='adam' ,loss='binary_crossentropy' ,metrics=['accuracy'])

"""Fit the training set"""

ann.fit(x_train,y_train,batch_size=32,epochs=100)

"""**Predict the results.**</n>

Use our ANN model to predict if the customer with the following informations will leave the bank: 
Geography: France
Credit Score: 600
Gender: Male
Age: 40 years old
Tenure: 3 years
Balance: $ 60000
Number of Products: 2
Does this customer have a credit card? Yes
Is this customer an Active Member: Yes
Estimated Salary: $ 50000
So, should we say goodbye to that customer?

"""

print(ann.predict(sc.transform([[1,0,0,600, 1, 40, 3, 60000, 2,1,1,50000]]))>0.5)

"""Predict the test set result"""

y_pred = ann.predict(x_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix

"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)